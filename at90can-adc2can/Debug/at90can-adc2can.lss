
at90can-adc2can.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca3  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa3  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b5  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_25>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <main>:



int main(void)
{
	cli();
  bc:	f8 94       	cli
	
	
	//init CAN
	
	messaggio_can.pt_data = &dato_misura[0]; //punta a indirizzo della roba da inviare - FORSE NECESSARIO BIT REVERSAL
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	90 87       	std	Z+8, r25	; 0x08
  c8:	87 83       	std	Z+7, r24	; 0x07
	messaggio_can.ctrl.ide = 0; //messaggio CAN standard (no extended)
  ca:	13 86       	std	Z+11, r1	; 0x0b
	messaggio_can.dlc = 2; //numero byte da mandare - lo stesso di dato_misura
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	86 83       	std	Z+6, r24	; 0x06
	messaggio_can.id.std  = CAN_ID_ROOT; //id, da ridefinire meglio probabilmente
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	34 e0       	ldi	r19, 0x04	; 4
  d4:	33 83       	std	Z+3, r19	; 0x03
  d6:	22 83       	std	Z+2, r18	; 0x02
	messaggio_can.cmd = CMD_TX_DATA; //configura message object
  d8:	81 83       	std	Z+1, r24	; 0x01
	
	//init ADC
	
	ADMUX = (1<<REFS1)|(1<<REFS0); //impostata VREF bandgap @ 2.56V
  da:	80 ec       	ldi	r24, 0xC0	; 192
  dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
	ADCSRA = (1<<ADIE);//per avviare conversione, aggiungere ADEN e ADSC 
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //prescaler a 128
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	80 83       	st	Z, r24
	
	sei();
  ec:	78 94       	sei
	
	ADCSRA |= (1<<ADEN) | (1<<ADSC);
  ee:	80 81       	ld	r24, Z
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	80 83       	st	Z, r24
	
    while (1) 
    {
		dato_misura[0] = ADCL;
  f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
  f8:	ee e0       	ldi	r30, 0x0E	; 14
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	80 83       	st	Z, r24
		dato_misura[1] = ADCH;
  fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 102:	81 83       	std	Z+1, r24	; 0x01
 104:	f7 cf       	rjmp	.-18     	; 0xf4 <main+0x38>

00000106 <__vector_25>:
    }
	
}

ISR (ADC_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	messaggio_can.id.std = CAN_ID_ROOT + ingresso_adc;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 120:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ingresso_adc>
 124:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ingresso_adc+0x1>
	if (ingresso_adc < 7)
 128:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ingresso_adc>
 12c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ingresso_adc+0x1>
 130:	07 97       	sbiw	r24, 0x07	; 7
 132:	54 f4       	brge	.+20     	; 0x148 <__vector_25+0x42>
		ingresso_adc++;
 134:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ingresso_adc>
 138:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ingresso_adc+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ingresso_adc+0x1>
 142:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ingresso_adc>
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_25+0x4a>
	else ingresso_adc = 0;
 148:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ingresso_adc+0x1>
 14c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ingresso_adc>
};
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
